Creating a simple Android app that fetches random products from AliExpress and posts them to Twitter requires multiple steps. This will involve:

1. Fetching data from AliExpress (for which we will assume an API or RSS feed).
2. Posting data to Twitter via their API.
3. Creating a simple user interface to trigger this functionality.

Here is a single-file example of how you could accomplish this in Kotlin. Note that this is a simplified version and may not cover all edge cases or best practices for production code. Also, you need to add the necessary dependencies for networking and Twitter integration.

### Dependencies
Add the following dependencies to your `build.gradle` file:

```gradle
implementation 'com.squareup.okhttp3:okhttp:4.9.1'
implementation 'com.twitter.sdk.android:twitter-core:3.3.0'
implementation 'com.twitter.sdk.android:twitter:3.3.0'
```

### MainActivity.kt
Create a `MainActivity.kt` file and add the following code:

```kotlin
package com.example.alitwitter

import android.os.Bundle
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.squareup.okhttp.OkHttpClient
import com.squareup.okhttp.Request
import com.twitter.sdk.android.core.*
import com.twitter.sdk.android.core.identity.TwitterAuthClient
import com.twitter.sdk.android.core.models.Tweet
import com.twitter.sdk.android.tweetcomposer.ComposerActivity
import org.json.JSONObject
import java.io.IOException
import java.util.*

class MainActivity : AppCompatActivity() {

    private val aliExpressUrl = "https://example.com/aliexpress-api/random" // Replace with actual API
    private lateinit var twitterAuthClient: TwitterAuthClient

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Twitter.initialize(this)
        setContentView(R.layout.activity_main)

        twitterAuthClient = TwitterAuthClient()

        val postButton: Button = findViewById(R.id.postButton)
        postButton.setOnClickListener {
            fetchRandomProduct { product ->
                if (product != null) {
                    postToTwitter(product)
                } else {
                    Toast.makeText(this, "Failed to fetch product", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    private fun fetchRandomProduct(callback: (String?) -> Unit) {
        val client = OkHttpClient()
        val request = Request.Builder().url(aliExpressUrl).build()

        client.newCall(request).enqueue(object : com.squareup.okhttp.Callback {
            override fun onFailure(request: Request?, e: IOException?) {
                runOnUiThread { callback(null) }
            }

            override fun onResponse(response: com.squareup.okhttp.Response?) {
                if (response != null && response.isSuccessful) {
                    val jsonData = response.body().string()
                    val jsonObject = JSONObject(jsonData)
                    val productTitle = jsonObject.optString("title")
                    runOnUiThread { callback(productTitle) }
                } else {
                    runOnUiThread { callback(null) }
                }
            }
        })
    }

    private fun postToTwitter(product: String) {
        val session = TwitterCore.getInstance().sessionManager.activeSession
        if (session == null) {
            twitterAuthClient.authorize(this, object : Callback<TwitterSession>() {
                override fun success(result: Result<TwitterSession>?) {
                    val intent = ComposerActivity.Builder(this@MainActivity)
                        .session(result?.data)
                        .text(product)
                        .createIntent()
                    startActivity(intent)
                }

                override fun failure(exception: TwitterException?) {
                    Toast.makeText(this@MainActivity, "Twitter authentication failed", Toast.LENGTH_SHORT).show()
                }
            })
        } else {
            val intent = ComposerActivity.Builder(this)
                .session(session)
                .text(product)
                .createIntent()
            startActivity(intent)
        }
    }
}
```

### activity_main.xml
Create a simple layout file `activity_main.xml` with a button:

```xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <Button
        android:id="@+id/postButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Post Random Product"
        android:layout_centerInParent="true" />
</RelativeLayout>
```

### Notes
1. **AliExpress API**: Replace the `aliExpressUrl` with an actual endpoint to fetch random products. You might need to handle authentication and parsing depending on the actual API.
2. **Twitter API**: Ensure you have registered your app with Twitter and obtained the necessary API keys. You might need to configure the app in the Twitter developer portal.
3. **Permissions and Authentication**: Handle the necessary permissions and authentication flows for both network access and Twitter API access.
4. **Error Handling**: Add proper error handling and user feedback mechanisms.

This example gives you a starting point. In a real-world application, you should also consider using modern libraries like Retrofit for network calls and more sophisticated error handling.